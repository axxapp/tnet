@model TNet.Models.MercViewModel
@{
    Layout = "~/Views/Shared/_ManageLayout.cshtml";
    ViewBag.Title = "编辑产品";
    if (Model.idmerc == 0)
    {
        ViewBag.Title = "新增产品";
    }
}
<link rel="stylesheet" href="@Url.Content("~/Css/bootstrap-fileinput/fileinput.min.css")" />
<script type="text/javascript" src="@Url.Content("~/Js/bootstrap-fileinput/plugins/sortable.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Js/bootstrap-fileinput/fileinput.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Js/bootstrap-fileinput/locales/zh.js")"></script>


<div class="ManageRightTitle">
    <ol class="breadcrumb">
        <li><a href="#">产品管理</a></li>
        <li><a href="@Url.Action("MercList","Manage")">商品管理</a></li>
        <li><a href="#" class="active">@(Model.idmerc == 0 ? "新增产品" : "编辑产品")</a></li>
    </ol>
</div>
<div class="ManageRightContent">
    <form id="form1" action="@Url.Action("MercEdit","Manage")" method="post" class="form-horizontal">
        <div class="merc-edit-box ">
            <fieldset>
                @Html.HiddenFor(model => model.idmerc)
                @Html.HiddenFor(model => model.imgs)
                <div class="form-group">
                    @Html.LabelFor(model => model.idtype, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.idtype, new SelectList(Model.mercTypes, "idtype", "name"), new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.idtype)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.merc1, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.merc1, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.merc1)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.sellpt, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.sellpt, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.sellpt)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.baseprice, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.baseprice, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.baseprice)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.stime, new { @class = "col-sm-2 control-label" })
                    <div id="@(Html.IdFor(model=>model.stime)+"_datepicker")" class="input-group date form_date col-sm-4 datetime_picker" data-date="" data-date-format="yyyy-mm-dd" data-link-field="@Html.IdFor(model=>model.stime)" data-link-format="yyyy-mm-dd">
                        <input class="form-control" size="16" type="text" value="@String.Format("{0:yyyy-MM-dd}", Model.stime)" readonly>
                        @*<span class="input-group-addon"><span class="glyphicon glyphicon-remove"></span></span>*@
                        <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                    </div>
                    @Html.HiddenFor(model => model.stime, new { @class = "form-control", Value = String.Format("{0:yyyy-MM-dd}", Model.stime) })
                    @Html.ValidationMessageFor(model => model.stime)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.entime, new { @class = "col-sm-2 control-label" })
                    <div id="@(Html.IdFor(model=>model.entime)+"_datepicker")" class="input-group date form_date col-sm-4 datetime_picker" data-date="" data-date-format="yyyy-mm-dd" data-link-field="@Html.IdFor(model=>model.entime)" data-link-format="yyyy-mm-dd">
                        <input class="form-control" size="16" type="text" value="@String.Format("{0:yyyy-MM-dd}", Model.stime)" readonly>
                        @*<span class="input-group-addon"><span class="glyphicon glyphicon-remove"></span></span>*@
                        <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                    </div>
                    @Html.HiddenFor(model => model.entime, new { @class = "form-control", Value = String.Format("{0:yyyy-MM-dd}", Model.stime) })
                    @Html.ValidationMessageFor(model => model.entime)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.netype, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.netype, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.netype)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.descs, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.descs, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.descs)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.notes, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.notes, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.notes)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.sortno, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.sortno, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.sortno)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.inuse, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.CheckBoxFor(model => model.inuse, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.inuse)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.imgs, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        <input type="file" name="image" id="mymercimage" multiple class="projectfile" />
                    </div>
                </div>
                @Html.ValidationSummary(true)
                <div class="form-group">
                    <div class="col-sm-10">
                        <input type="button" value="保存" class="btn btn-primary" />
                    </div>
                </div>
            </fieldset>

        </div>

    </form>

</div>

<script type="text/javascript">
    //初始化fileinput控件（第一次初始化）
    function initFileInput(ctrlName, uploadUrl, initialPreview, initialPreviewConfig) {
        var control = $('#' + ctrlName);
        control.fileinput({
            initialPreview: initialPreview,
            initialPreviewConfig:initialPreviewConfig,
            initialPreviewAsData: true,
            language: 'zh', //设置语言
            uploadUrl: uploadUrl, //上传的地址
            uploadAsync: true,
            maxFileCount: 5,
            overwriteInitial: false,
            allowedPreviewTypes: ['image'],
            allowedFileExtensions: ['jpg', 'png', 'gif'],//接收的文件后缀
            showUpload: false, //是否显示上传按钮
            showCaption: false,//是否显示标题
            showDrag:true,
            browseClass: "btn btn-primary", //按钮样式
            previewFileIcon: "<i class='glyphicon glyphicon-king'></i>",
        }).on("filebatchselected", function (event, files) {
            control.fileinput("upload");
        });
        control.on('fileuploaded', function (event, data, id, index) {
            var responseData = data.response;
            if (responseData.Code == "1") {
                alert(responseData.Message);
            }
            else if (responseData.Code == "2") {
                alert(responseData.Message);
            }

        });
    }

    function initMercImages() {
        var uploadUrl = "@Url.Action("UploadMercImage","Manage",new { mercId = Model.idmerc })";
        var getMercImageUrl = "@Url.Action("AjaxMercImageList", "Manage")";
        var sortMercImagesUrl = "@Url.Action("SortMercImage", "Manage",new { isAjax =true})";
        $.post(getMercImageUrl, { mercId: "@Model.idmerc",isAjax:true }, function (returndata) {
            returndata = eval("(" + returndata+")");
            var initPreviewImage = [];
            var initialPreviewConfig = [];
            if (returndata.Code == 1) {
                if (returndata.Content.length > 0) {
                    for (var i = 0; i < returndata.Content.length; i++) {
                        initPreviewImage.push(returndata.Content[i].Path);
                    }
                }
            }
            else if (returndata.Code == 2) {
                alert("无法获取产品图片。");
            }
            initFileInput("mymercimage", uploadUrl, initPreviewImage, initialPreviewConfig);
            $(".file-initial-thumbs").attr("id", "simpleList");
            $(".file-preview-initial").addClass("list-group-item");
            $(".file-preview-initial").addClass("glyphicon-move");
            $(".file-preview-initial").each(function (i, d) {
                $(d).attr("key", returndata.Content[i].MercImageId);
            });
            KvSortable.create(document.getElementById('simpleList'), {
                handle: '.glyphicon-move',
                animation: 150,
                onEnd: function (evt) {

                }
            });
        });
    }

    $(function () {
        initMercImages();
        $('#@(Html.NameFor(model => model.stime)+"_datepicker")').datetimepicker({
            language: 'zh-CN',
            weekStart: 1,
            todayBtn: 1,
            autoclose: 1,
            todayHighlight: 1,
            startView: 2,
            minView: 2,
            forceParse: 0
        });
        $('#@(Html.NameFor(model => model.entime)+"_datepicker")').datetimepicker({
            language: 'zh-CN',
            weekStart: 1,
            todayBtn: 1,
            autoclose: 1,
            todayHighlight: 1,
            startView: 2,
            minView: 2,
            forceParse: 0
        });
    });

</script>
