@using TNet.Models;
@model TNet.Models.BusinessViewModel
@{
    Layout = "~/Views/Shared/_ManageLayout.cshtml";
    ViewBag.Title = "编辑商圈";
    if (Model.idbuss == 0)
    {
        ViewBag.Title = "录入商圈";
    }

    List<SelectItemViewModel<string>> citySelects = (List<SelectItemViewModel<string>>)ViewData["citySelects"];
}
<link rel="stylesheet" href="@Url.Content("~/Css/bootstrap-fileinput/fileinput.min.css")" />
<script type="text/javascript" src="@Url.Content("~/Js/bootstrap-fileinput/plugins/sortable.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Js/bootstrap-fileinput/fileinput.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Js/bootstrap-fileinput/locales/zh.js")"></script>

<div class="ManageRightTitle">
    <ol class="breadcrumb">
        <li><a href="#">商圈管理</a></li>
        <li><a href="@Url.Action("BusinessList","Manage")">商圈列表</a></li>
        <li><a href="#" class="active">@(Model.idbuss == 0 ? "录入商圈" : "编辑商圈")</a></li>
    </ol>
</div>
<div class="ManageRightContent">
    <form  id="form1" action="@Url.Action("BusinessEdit","Manage")" method="post" class="form-horizontal">
        <div class="merc-edit-box ">
            <fieldset>
                @Html.HiddenFor(model => model.idbuss)
                @Html.HiddenFor(model => model.longitude)
                @Html.HiddenFor(model => model.latitude)
                @Html.HiddenFor(model => model.city)
                @Html.HiddenFor(model => model.citycode)
                <input type="hidden" name="bussImages" id="bussImages" value="" />
                <div class="form-group">
                    @Html.LabelFor(model => model.buss, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.buss, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.buss)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.contact, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.contact, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.contact)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.phone, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.phone, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.phone)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.city, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownList("ddlCity", new SelectList(citySelects, "DisplayValue", "DisplayText"), new { @class = "form-control", Value = (Model.city+"_"+Model.citycode) })
                    </div>
                    @Html.ValidationMessageFor(model => model.city)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.addr, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.addr, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.addr)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.sellpt, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.sellpt, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.sellpt)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.cretime, new { @class = "col-sm-2 control-label" })
                    <div id="@(Html.IdFor(model=>model.cretime)+"_datepicker")" class="input-group date form_date col-sm-4 datetime_picker" data-date="" data-date-format="yyyy-mm-dd" data-link-field="@Html.IdFor(model=>model.cretime)" data-link-format="yyyy-mm-dd">
                        <input class="form-control" size="16" type="text" value="@String.Format("{0:yyyy-MM-dd}", Model.cretime)" readonly>
                        <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                    </div>
                    @Html.HiddenFor(model => model.cretime, new { @class = "form-control", Value = String.Format("{0:yyyy-MM-dd}", Model.cretime) })
                    @Html.ValidationMessageFor(model => model.cretime)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.busstime, new { @class = "col-sm-2 control-label" })
                    <div id="@(Html.IdFor(model=>model.busstime)+"_datepicker")" class="input-group date form_date col-sm-4 datetime_picker" data-date="" data-date-format="yyyy-mm-dd" data-link-field="@Html.IdFor(model=>model.busstime)" data-link-format="yyyy-mm-dd">
                        <input class="form-control" size="16" type="text" value="@String.Format("{0:yyyy-MM-dd}", Model.busstime)" readonly>
                        <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                    </div>
                    @Html.HiddenFor(model => model.busstime, new { @class = "form-control", Value = String.Format("{0:yyyy-MM-dd}", Model.busstime) })
                    @Html.ValidationMessageFor(model => model.busstime)
                </div>
               
                <div class="form-group">
                    @Html.LabelFor(model => model.price, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.price, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.price)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.runtime, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.runtime, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.runtime)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.sortno, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.sortno, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.sortno)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.notes, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.notes, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.notes)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.blevel, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.blevel, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.blevel)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.inuse, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.CheckBoxFor(model => model.inuse, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(model => model.inuse)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.imgs, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        <input type="file" name="image" id="myBussImage" multiple class="projectfile" />
                    </div>
                </div>
                @Html.ValidationSummary(true)
                <div class="form-group">
                    <div class="col-sm-2">
                    </div>
                    <div class="col-sm-10" style="padding-top:10px;">
                        <input type="button" id="btnSave" value="保存" class="btn btn-primary" />
                    </div>
                </div>
            </fieldset>

        </div>

    </form>

</div>

<script type="text/javascript">
    function initFileInput(ctrlName, uploadUrl, initialPreview, initialPreviewConfig) {
        var $control = $('#' + ctrlName);
        $control.fileinput({
            initialPreview: initialPreview,
            initialPreviewConfig: initialPreviewConfig,
            initialPreviewAsData: true,
            language: 'zh', //设置语言
            uploadUrl: uploadUrl, //上传的地址
            uploadAsync: true,
            maxFileCount: 5,
            overwriteInitial: false,
            allowedPreviewTypes: ['image'],
            allowedFileExtensions: ['jpg', 'png', 'gif'],//接收的文件后缀
            showUpload: false, //是否显示上传按钮
            showRemove: false, // hide remove button
            showCaption: false,//是否显示标题
            browseClass: "btn btn-primary", //按钮样式
            previewFileIcon: "<i class='glyphicon glyphicon-king'></i>",
            showBrowse: false,
            browseOnZoneClick: true
        }).on("filebatchselected", function (event, files) {
            $control.fileinput("upload");
        }).on('fileuploaded', function (event, data, id, index) {
            bindDrag();
            var responseData = data.response;
            if (responseData.Code == "1") {
                alert(responseData.Message);
            }
            else if (responseData.Code == "2") {
                alert(responseData.Message);
            }

        });
    }

    function initBussImages() {
        var uploadUrl = "@Url.Action("UploadBussImage", "Manage",new { idbuss = Model.idbuss })";
        var getBussImageUrl = "@Url.Action("AjaxBussImageList", "Manage")";
        var deleteBussImageUrl = "@Url.Action("DeleteBussImage", "Manage",new { isAjax =true})";
        $.post(getBussImageUrl, { idbuss: "@Model.idbuss", isAjax: true }, function (returndata) {
            returndata = eval("(" + returndata + ")");
            var initPreviewImage = [];
            var initialPreviewConfig = [];
            if (returndata.Code == 1) {
                if (returndata.Content.length > 0) {
                    for (var i = 0; i < returndata.Content.length; i++) {
                        initPreviewImage.push(returndata.Content[i].Path);
                        var initialPreviewConfigItem = {
                            url: deleteBussImageUrl,
                            key: returndata.Content[i].BussImageId,
                            extra: { BussImageId: returndata.Content[i].BussImageId, idbuss: "@Model.idbuss" }
                        };
                        initialPreviewConfig.push(initialPreviewConfigItem);
                    }
                }
            }
            else if (returndata.Code == 2) {
                alert("无法获取商圈图片。");
            }
            initFileInput("myBussImage", uploadUrl, initPreviewImage, initialPreviewConfig);
            bindDrag();
        });
    }

    function bindDrag() {
        $(".file-initial-thumbs").attr("id", "simpleList");
        $(".file-preview-initial").addClass("list-group-item");
        //$(".file-preview-initial").addClass("glyphicon-move");
        if (document.getElementById('simpleList') != null) {
            KvSortable.create(document.getElementById('simpleList'), {
                handle: '.glyphicon-move',
                animation: 150,
                onEnd: function (evt) {

                }
            });
        }
    }
    $(function () {
        $("#ddlCity").change(function () {
            var cityVal = $(this).val();
            $("#@Html.IdFor(model=>model.city)").val(cityVal.split("_")[0]);
            $("#@Html.IdFor(model=>model.citycode)").val(cityVal.split("_")[1]);
        });

        $.fn.bootstrapSwitch.defaults.onText = '启用';
        $.fn.bootstrapSwitch.defaults.offText = '禁用';
        $("#@Html.IdFor(model => model.inuse)").bootstrapSwitch();

        initBussImages();
        var timeout = window.setInterval(bindDrag, 1000);

        $("#btnSave").click(function () {
            var bussImages = "";
            $(".kv-file-content").find("img").each(function (i, d) {
                if (i == 0) {
                    bussImages += $(d).attr("src");
                }
                else {
                    bussImages += "," + $(d).attr("src");
                }
            });
            $("#bussImages").val(bussImages);
            $("#form1").submit();
        });
        $('#@(Html.NameFor(model => model.cretime) +"_datepicker")').datetimepicker({
            language: 'zh-CN',
            weekStart: 1,
            todayBtn: 1,
            autoclose: 1,
            todayHighlight: 1,
            startView: 2,
            minView: 2,
            forceParse: 0
        });
        $('#@(Html.NameFor(model => model.busstime) +"_datepicker")').datetimepicker({
            language: 'zh-CN',
            weekStart: 1,
            todayBtn: 1,
            autoclose: 1,
            todayHighlight: 1,
            startView: 2,
            minView: 2,
            forceParse: 0
        });
    });

</script>
